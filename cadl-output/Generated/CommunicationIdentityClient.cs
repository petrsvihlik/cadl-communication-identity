// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace CommunicationIdentity
{
    // Data plane generated client. The CommunicationIdentity service client.
    /// <summary> The CommunicationIdentity service client. </summary>
    public partial class CommunicationIdentityClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of CommunicationIdentityClient. </summary>
        public CommunicationIdentityClient() : this(new Uri("https://example.com"), new CommunicationIdentityClientOptions())
        {
        }

        /// <summary> Initializes a new instance of CommunicationIdentityClient. </summary>
        /// <param name="endpoint"> Single server endpoint. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public CommunicationIdentityClient(Uri endpoint, CommunicationIdentityClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new CommunicationIdentityClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateUserAndTokenAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new CommunicationIdentityClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateUserAndTokenAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("user").GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("token").GetProperty("token").ToString());
        /// Console.WriteLine(result.GetProperty("token").GetProperty("expiresOn").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateUserAndTokenAsync with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new CommunicationIdentityClient();
        /// 
        /// var data = new {
        ///     createTokenWithScopes = new[] {
        ///         "<String>"
        ///     },
        ///     expiresInMinutes = 1234,
        /// };
        /// 
        /// Response response = await client.CreateUserAndTokenAsync(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("user").GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("token").GetProperty("token").ToString());
        /// Console.WriteLine(result.GetProperty("token").GetProperty("expiresOn").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>CreateTokenWithScopes</c>:
        /// <code>{
        ///   createTokenWithScopes: [string], # Optional.
        ///   expiresInMinutes: number, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>CommunicationUserIdentifierAndToken</c>:
        /// <code>{
        ///   user: {
        ///     id: string, # Required.
        ///   }, # Required.
        ///   token: {
        ///     token: string, # Required.
        ///     expiresOn: string (date &amp; time), # Required.
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateUserAndTokenAsync(RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("CommunicationIdentityClient.CreateUserAndToken");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateUserAndTokenRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateUserAndToken and parse the result.
        /// <code><![CDATA[
        /// var client = new CommunicationIdentityClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateUserAndToken(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("user").GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("token").GetProperty("token").ToString());
        /// Console.WriteLine(result.GetProperty("token").GetProperty("expiresOn").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateUserAndToken with all request content, and how to parse the result.
        /// <code><![CDATA[
        /// var client = new CommunicationIdentityClient();
        /// 
        /// var data = new {
        ///     createTokenWithScopes = new[] {
        ///         "<String>"
        ///     },
        ///     expiresInMinutes = 1234,
        /// };
        /// 
        /// Response response = client.CreateUserAndToken(RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("user").GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("token").GetProperty("token").ToString());
        /// Console.WriteLine(result.GetProperty("token").GetProperty("expiresOn").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>CreateTokenWithScopes</c>:
        /// <code>{
        ///   createTokenWithScopes: [string], # Optional.
        ///   expiresInMinutes: number, # Optional.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>CommunicationUserIdentifierAndToken</c>:
        /// <code>{
        ///   user: {
        ///     id: string, # Required.
        ///   }, # Required.
        ///   token: {
        ///     token: string, # Required.
        ///     expiresOn: string (date &amp; time), # Required.
        ///   }, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateUserAndToken(RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("CommunicationIdentityClient.CreateUserAndToken");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateUserAndTokenRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The CommunicationUserIdentifier to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call RevokeAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new CommunicationIdentityClient();
        /// 
        /// Response response = await client.RevokeAsync(null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> RevokeAsync(object id, RequestContext context = null)
        {
            Argument.AssertNotNull(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("CommunicationIdentityClient.Revoke");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRevokeRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The CommunicationUserIdentifier to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call Revoke with required parameters.
        /// <code><![CDATA[
        /// var client = new CommunicationIdentityClient();
        /// 
        /// Response response = client.Revoke(null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response Revoke(object id, RequestContext context = null)
        {
            Argument.AssertNotNull(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("CommunicationIdentityClient.Revoke");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRevokeRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The CommunicationUserIdentifier to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetTokenAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new CommunicationIdentityClient();
        /// 
        /// Response response = await client.GetTokenAsync(null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> GetTokenAsync(object id, RequestContext context = null)
        {
            Argument.AssertNotNull(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("CommunicationIdentityClient.GetToken");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTokenRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The CommunicationUserIdentifier to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call GetToken with required parameters.
        /// <code><![CDATA[
        /// var client = new CommunicationIdentityClient();
        /// 
        /// Response response = client.GetToken(null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response GetToken(object id, RequestContext context = null)
        {
            Argument.AssertNotNull(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("CommunicationIdentityClient.GetToken");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTokenRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The CommunicationUserIdentifier to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new CommunicationIdentityClient();
        /// 
        /// Response response = await client.DeleteAsync(null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteAsync(object id, RequestContext context = null)
        {
            Argument.AssertNotNull(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("CommunicationIdentityClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The CommunicationUserIdentifier to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call Delete with required parameters.
        /// <code><![CDATA[
        /// var client = new CommunicationIdentityClient();
        /// 
        /// Response response = client.Delete(null);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response Delete(object id, RequestContext context = null)
        {
            Argument.AssertNotNull(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("CommunicationIdentityClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ExchangeAccessTokenAsync with required request content.
        /// <code><![CDATA[
        /// var client = new CommunicationIdentityClient();
        /// 
        /// var data = new {
        ///     appId = "<appId>",
        ///     token = "<token>",
        ///     userId = "<userId>",
        /// };
        /// 
        /// Response response = await client.ExchangeAccessTokenAsync(RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ExchangeAccessTokenRequest</c>:
        /// <code>{
        ///   appId: string, # Required.
        ///   token: string, # Required.
        ///   userId: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> ExchangeAccessTokenAsync(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("CommunicationIdentityClient.ExchangeAccessToken");
            scope.Start();
            try
            {
                using HttpMessage message = CreateExchangeAccessTokenRequest(content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call ExchangeAccessToken with required request content.
        /// <code><![CDATA[
        /// var client = new CommunicationIdentityClient();
        /// 
        /// var data = new {
        ///     appId = "<appId>",
        ///     token = "<token>",
        ///     userId = "<userId>",
        /// };
        /// 
        /// Response response = client.ExchangeAccessToken(RequestContent.Create(data));
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ExchangeAccessTokenRequest</c>:
        /// <code>{
        ///   appId: string, # Required.
        ///   token: string, # Required.
        ///   userId: string, # Required.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response ExchangeAccessToken(RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("CommunicationIdentityClient.ExchangeAccessToken");
            scope.Start();
            try
            {
                using HttpMessage message = CreateExchangeAccessTokenRequest(content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateUserAndTokenRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/identities", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateRevokeRequest(object id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/identities/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/:revokeAccessTokens", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTokenRequest(object id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/identities/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/:issueAccessToken", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteRequest(object id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/identities/", false);
            uri.AppendPath(id, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateExchangeAccessTokenRequest(RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/teamsUser/:exchangeAccessToken", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
